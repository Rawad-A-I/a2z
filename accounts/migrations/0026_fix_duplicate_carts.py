# Generated by Django 4.2.7

from django.db import migrations


def fix_duplicate_carts(apps, schema_editor):
    """Fix duplicate carts by keeping only the newest one for each user"""
    Cart = apps.get_model('accounts', 'Cart')
    
    # Get all users with duplicate carts
    from django.db.models import Count
    from django.db.models import Max
    
    # Find users with multiple unpaid carts
    duplicate_users = Cart.objects.filter(is_paid=False).values('user_id').annotate(
        count=Count('uid')
    ).filter(count__gt=1)
    
    for user_data in duplicate_users:
        user_id = user_data['user_id']
        if user_id is None:  # Skip anonymous users
            continue
            
        # Get all unpaid carts for this user, ordered by creation date (newest first)
        user_carts = Cart.objects.filter(user_id=user_id, is_paid=False).order_by('-created_at')
        
        # Keep the newest one, mark others as paid
        if user_carts.count() > 1:
            newest_cart = user_carts.first()
            old_carts = user_carts.exclude(uid=newest_cart.uid)
            
            # Mark old carts as paid to avoid conflicts
            old_carts.update(is_paid=True)


def reverse_fix_duplicate_carts(apps, schema_editor):
    """Reverse operation - no need to do anything"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0022_profile_phone_country_code'),
    ]

    operations = [
        migrations.RunPython(fix_duplicate_carts, reverse_fix_duplicate_carts),
    ]
